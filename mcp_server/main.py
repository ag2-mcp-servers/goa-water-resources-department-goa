# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:04:33+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    ErcerCertificatePostRequest,
    ErcerCertificatePostResponse,
    ErcerCertificatePostResponse1,
    ErcerCertificatePostResponse2,
    ErcerCertificatePostResponse3,
    ErcerCertificatePostResponse4,
    ErcerCertificatePostResponse5,
    ErcerCertificatePostResponse6,
    PfdawCertificatePostRequest,
    PfdawCertificatePostResponse,
    PfdawCertificatePostResponse1,
    PfdawCertificatePostResponse2,
    PfdawCertificatePostResponse3,
    PfdawCertificatePostResponse4,
    PfdawCertificatePostResponse5,
    PfdawCertificatePostResponse6,
    TpcerCertificatePostRequest,
    TpcerCertificatePostResponse,
    TpcerCertificatePostResponse1,
    TpcerCertificatePostResponse2,
    TpcerCertificatePostResponse3,
    TpcerCertificatePostResponse4,
    TpcerCertificatePostResponse5,
    TpcerCertificatePostResponse6,
)

app = MCPProxy(
    description="Goa WRD (https://goawrd.gov.in/) is the official departmental portal of the Water Resources Department, Govt. of Goa, through which citizens can avail time bound service being offered by the department. Certificates issued by it (e.g. Contractor Enlistment, Well Registration etc) are made available in citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Goa Water Resources Department, Goa',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/goawrd/v3'}],
)


@app.post(
    '/ercer/certificate',
    description=""" API to verify Registration Certificate of Establishment Employing Contract Labour. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ercer(body: ErcerCertificatePostRequest = None):
    """
    Registration Certificate of Establishment Employing Contract Labour
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/pfdaw/certificate',
    description=""" API to verify Permission/ Certificate for Well. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def pfdaw(body: PfdawCertificatePostRequest = None):
    """
    Permission/ Certificate for Well
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tpcer/certificate',
    description=""" API to verify Permission/ Certificate for Transportation (Petroleum Products, Water etc.). """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def tpcer(body: TpcerCertificatePostRequest = None):
    """
    Permission/ Certificate for Transportation (Petroleum Products, Water etc.)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
